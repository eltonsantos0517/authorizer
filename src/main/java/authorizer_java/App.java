/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package authorizer_java;

import br.com.authorizer.account.entrypoint.commandline.AccountCommandLineController;
import br.com.authorizer.account.entrypoint.commandline.CreateAccountResponse;
import br.com.authorizer.account.gateway.AccountRepository;
import br.com.authorizer.account.gateway.client.AccountInMemoryDatabase;
import br.com.authorizer.account.usecase.CreateAccountUseCase;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.annotations.SerializedName;

import java.io.*;
import java.math.BigDecimal;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

public class App {
    public static class Account {
        @SerializedName("active-card")
        public boolean activeCard;

        @SerializedName("available-limit")
        public BigDecimal availableLimit;
    }

    public static class Transaction {
        public BigDecimal amount;
        public String merchant;
        public String time;
    }

    public static class Request {
        public Account account;
        public Transaction transaction;
    }

    public static class Result {
        public Account account;
        public ArrayList<String> violations;
    }

    public static void run(Reader in, Writer out) throws Exception {
        BufferedReader r = new BufferedReader(in);
        PrintWriter w = new PrintWriter(out);
        Gson g = new GsonBuilder().serializeNulls().create();
        Account account = null;
        ArrayList<Transaction> transactions = new ArrayList<>();
        String line;

        AccountCommandLineController accountController = new AccountCommandLineController(
                new CreateAccountUseCase(
                        new AccountRepository(
                                new AccountInMemoryDatabase()
                        )
                )
        );

        while ((line = r.readLine()) != null) {
            Request request = g.fromJson(line, Request.class);
            if (request.account != null) {
//                if (account != null) {
//                    Result res = new Result();
//                    res.account = account;
//                    res.violations = new ArrayList<>();
//                    res.violations.add("account-already-initialized");
//                    w.println(g.toJson(res));
//                    w.flush();
//                } else {
//                    account = request.account;
//                    Result res = new Result();
//                    res.account = account;
//                    res.violations = new ArrayList<>();
//                    w.println(g.toJson(res));
//                    w.flush();
//                }

                CreateAccountResponse response = accountController.createAccount(request.account);
                account = new Account();
                account.activeCard = response.getAccount().isActiveCard();
                account.availableLimit = response.getAccount().getAvailableLimit();

                w.println(g.toJson(response));
                w.flush();

            } else if (request.transaction != null) {
                if (account == null) {
                    Result res = new Result();
                    res.account = null;
                    res.violations = new ArrayList<>();
                    res.violations.add("account-not-initialized");
                    w.println(g.toJson(res));
                    w.flush();
                } else {
                    ArrayList<String> violations = new ArrayList<>();
                    if (request.transaction.amount.compareTo(account.availableLimit) > 0) {
                        violations.add("insufficient-limit");
                    }
                    if (account.activeCard != true) {
                        violations.add("card-not-active");
                    }
                    {
                        ZonedDateTime newTxTime = ZonedDateTime.parse(request.transaction.time, DateTimeFormatter.ISO_DATE_TIME).withZoneSameInstant(ZoneOffset.UTC);
                        ZonedDateTime twoMinutesBefore = newTxTime.minusMinutes(2);
                        ArrayList<Transaction> transactionsInLast2Mins = new ArrayList<>();
                        for (Transaction tx : transactions) {
                            if (ZonedDateTime.parse(tx.time, DateTimeFormatter.ISO_DATE_TIME).withZoneSameInstant(ZoneOffset.UTC).isAfter(twoMinutesBefore)) {
                                transactionsInLast2Mins.add(tx);
                            }
                        }
                        if (transactionsInLast2Mins.size() >= 3) {
                            violations.add("high-frequency-small-interval");
                        }
                    }
                    {
                        ZonedDateTime newTxTime = ZonedDateTime.parse(request.transaction.time, DateTimeFormatter.ISO_DATE_TIME).withZoneSameInstant(ZoneOffset.UTC);
                        ZonedDateTime twoMinutesBefore = newTxTime.minusMinutes(2);
                        ArrayList<Transaction> similarTransactionsInLast2Mins = new ArrayList<>();
                        for (Transaction tx : transactions) {
                            if (ZonedDateTime.parse(tx.time, DateTimeFormatter.ISO_DATE_TIME).withZoneSameInstant(ZoneOffset.UTC).isAfter(twoMinutesBefore)
                                    && tx.amount.equals(request.transaction.amount)
                                    && tx.merchant.equals(request.transaction.merchant)) {
                                similarTransactionsInLast2Mins.add(tx);
                            }
                        }
                        if (!similarTransactionsInLast2Mins.isEmpty()) {
                            violations.add("doubled-transaction");
                        }
                    }
                    if (violations.isEmpty()) {
                        transactions.add(request.transaction);
                        account.availableLimit = account.availableLimit.subtract(request.transaction.amount);
                        Result res = new Result();
                        res.account = account;
                        res.violations = violations;
                        w.println(g.toJson(res));
                        w.flush();
                    } else {
                        Result res = new Result();
                        res.account = account;
                        res.violations = violations;
                        w.println(g.toJson(res));
                        w.flush();
                    }
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        run(new InputStreamReader(System.in), new OutputStreamWriter(System.out));
    }
}
